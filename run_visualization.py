#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç —Å —Ü–µ–Ω–∞–º–∏ –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ.
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –∫–∞—Ä—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ folium —Å –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—ã–º–∏ —Å–ª–æ—è–º–∏ —Ç–æ–ø–ª–∏–≤–∞.
"""

import sys
import subprocess
from pathlib import Path
import glob

def install_dependencies():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏."""
    print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        subprocess.check_call([sys.executable, "-m", "pip", "install", 
                             "folium", "branca", "pandas", "--break-system-packages"])
        print("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        return False

def find_price_file():
    """–ò—â–µ—Ç —Ñ–∞–π–ª —Å —Ü–µ–Ω–∞–º–∏ –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ."""
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
    patterns = [
        "regional_prices_*.json",
        "prices_*.json", 
        "fuel_prices_*.json"
    ]
    
    for pattern in patterns:
        files = glob.glob(pattern)
        if files:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            return max(files, key=lambda x: Path(x).stat().st_mtime)
    
    return None

def run_map_generation():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç."""
    print("\n" + "="*50)
    print("–°–û–ó–î–ê–ù–ò–ï –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ô –ö–ê–†–¢–´")
    print("="*50)
    
    try:
        subprocess.check_call([sys.executable, "visualizations/fuel_price_map.py"])
        return True
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞—Ä—Ç —Å —Ü–µ–Ω–∞–º–∏ –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å —Ü–µ–Ω–∞–º–∏
    price_file = find_price_file()
    
    if not price_file:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å —Ü–µ–Ω–∞–º–∏ –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ!")
        print("\nüìç –¢–†–ï–ë–£–ï–¢–°–Ø –§–ê–ô–õ –° –¶–ï–ù–ê–ú–ò:")
        print("   –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞")
        print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤:")
        print("   ‚Ä¢ regional_prices_YYYYMMDD_HHMMSS.json")
        print("   ‚Ä¢ prices_YYYYMMDD_HHMMSS.json")
        print("   ‚Ä¢ fuel_prices_YYYYMMDD_HHMMSS.json")
        print("\nüîß –ö–ê–ö –ü–û–õ–£–ß–ò–¢–¨ –§–ê–ô–õ –° –¶–ï–ù–ê–ú–ò:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä: python regional_parser.py")
        print("   2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: regional_prices_20250707_145425.json")
        print("   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å —Ü–µ–Ω–∞–º–∏")
        print("\nüí° –ü–†–ò–ú–ï–† –°–û–î–ï–†–ñ–ò–ú–û–ì–û –§–ê–ô–õ–ê:")
        print("   [")
        print('     {"region_id": 77, "region_name": "–†–µ–≥–∏–æ–Ω", "fuel_prices": {"–ê–ò-92": 56.5, "–ü—Ä–æ–ø–∞–Ω": 27.5}}')
        print("   ]")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å —Ü–µ–Ω–∞–º–∏: {price_file}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º geojson —Ñ–∞–π–ª –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    geojson_paths = [
        "data/geojson/russia_reg v2.geojson",
        "src/russia_reg v2.geojson"
    ]
    
    geojson_found = False
    for geojson_path in geojson_paths:
        if Path(geojson_path).exists():
            geojson_found = True
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –≥—Ä–∞–Ω–∏—Ü: {geojson_path}")
            break
    
    if not geojson_found:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤!")
        print("–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è:")
        for path in geojson_paths:
            print(f"  - {path}")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not install_dependencies():
        return False
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
    if not run_map_generation():
        return False
    
    print("\n" + "="*60)
    print("üéâ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û!")
    print("="*60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    maps_dir = Path("data/maps")
    if maps_dir.exists():
        print("\nüìç –°–æ–∑–¥–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞:")
        map_file = maps_dir / "fuel_price_interactive_map.html"
        if map_file.exists():
            print(f"   {map_file}")
            print(f"üåê –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: file://{map_file.absolute()}")
            print("\nüîß –§—É–Ω–∫—Ü–∏–∏ –∫–∞—Ä—Ç—ã:")
            print("   ‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∏–¥–∞–º–∏ —Ç–æ–ø–ª–∏–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–ª–æ—ë–≤")
            print("   ‚Ä¢ –ü–æ–∏—Å–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É")
            print("   ‚Ä¢ –ö–ª–∏–∫ –Ω–∞ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ü–µ–Ω")
            print("   ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏")
            print("   ‚Ä¢ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ê–ò-92 (—Å–∞–º–æ–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ)")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)