#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ russiabase.ru
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–±–æ—Ä —Å—Ä–µ–¥–Ω–∏—Ö —Ü–µ–Ω –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from src.parsers.russiabase_parser import RussiaBaseRegionalParser
from datetime import datetime


def demo_regional_parser():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–ì–ò–û–ù–ê–õ–¨–ù–û–ì–û –ü–ê–†–°–ï–†–ê RUSSIABASE.RU")
    print("=" * 60)
    print("–°–æ–±–∏—Ä–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –†–æ—Å—Å–∏–∏")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    config = {
        "type": "russiabase_regional",
        "name": "RussiaBase Regional Demo"
    }
    
    parser = RussiaBaseRegionalParser("demo", config)
    
    # –î–µ–º–æ-—Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    demo_regions = [
        {"id": 77, "name": "–ú–æ—Å–∫–≤–∞"},
        {"id": 78, "name": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"},  
        {"id": 40, "name": "–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"},
        {"id": 23, "name": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π"},
        {"id": 16, "name": "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω"}
    ]
    
    print(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(demo_regions)} —Ä–µ–≥–∏–æ–Ω–æ–≤:")
    for region in demo_regions:
        print(f"   ‚Ä¢ {region['name']} (ID: {region['id']})")
    
    print("\n" + "=" * 60)
    print("üîÑ –ù–ê–ß–ò–ù–ê–ï–ú –°–ë–û–† –î–ê–ù–ù–´–•...")
    print("=" * 60)
    
    results = []
    
    for i, region in enumerate(demo_regions, 1):
        region_id = region["id"]
        region_name = region["name"]
        
        print(f"\n[{i}/{len(demo_regions)}] üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {region_name}")
        print(f"    üåê URL: https://russiabase.ru/prices?region={region_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞
            region_data = parser._fetch_region_data(region_id, region_name)
            results.append(region_data)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if region_data['status'] == 'success':
                fuel_prices = region_data.get('fuel_prices', {})
                if fuel_prices:
                    print(f"    ‚úÖ –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ")
                    print(f"    üí∞ –ù–∞–π–¥–µ–Ω–æ —Ü–µ–Ω: {len(fuel_prices)}")
                    for fuel_type, price in fuel_prices.items():
                        print(f"        {fuel_type}: {price} —Ä—É–±.")
                else:
                    print(f"    ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: –¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                error = region_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                print(f"    ‚ùå –°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ - {error}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            parser.add_delay()
            
        except Exception as e:
            print(f"    üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            results.append({
                'region_id': region_id,
                'region_name': region_name,
                'fuel_prices': {},
                'status': 'error',
                'error': str(e)
            })
    
    print("\n" + "=" * 60)
    print("üìä –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    df = parser.create_fuel_prices_table(results)
    print(df.to_string(index=False))
    
    print("\n" + "=" * 60)
    print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = parser._create_statistics(results)
    for key, value in stats.items():
        print(f"  {key.replace('_', ' ')}: {value}")
    
    print("\n" + "=" * 60)
    print("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 60)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"demo_regional_prices_{timestamp}.xlsx"
    
    try:
        saved_file = parser.save_to_excel(results, filename)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {saved_file}")
        print(f"üìÅ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—Å—Ç—ã: Regional_Prices, Statistics, Errors")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    print("\n" + "=" * 60)
    print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 60)
    
    successful = len([r for r in results if r['status'] == 'success'])
    total = len(results)
    success_rate = (successful / total) * 100 if total > 0 else 0
    
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {total}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    if successful > 0:
        print("\nüéØ –ü–ê–†–°–ï–† –°–†–ï–î–ù–ò–• –¶–ï–ù –ù–ê –¢–û–ü–õ–ò–í–û –†–ê–ë–û–¢–ê–ï–¢ –ü–û–õ–ù–û–¶–ï–ù–ù–û!")
        print("   –ú–æ–∂–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —Ä–µ–≥–∏–æ–Ω–∞–º –†–æ—Å—Å–∏–∏")
        print("   –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python run_regional_parser.py --full")
    else:
        print("\n‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Å–∞–π—Ç–∞")
    
    return results


def show_usage_examples():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
    print("\n" + "=" * 60)
    print("üìö –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ü–ê–†–°–ï–†–ê")
    print("=" * 60)
    
    examples = [
        ("–ü–æ–ª–Ω—ã–π —Å–±–æ—Ä –ø–æ –≤—Å–µ–º —Ä–µ–≥–∏–æ–Ω–∞–º", "python run_regional_parser.py --full"),
        ("–¢–µ—Å—Ç–æ–≤—ã–π —Å–±–æ—Ä (5 —Ä–µ–≥–∏–æ–Ω–æ–≤)", "python run_regional_parser.py --test"),
        ("–°–±–æ—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ä–µ–≥–∏–æ–Ω–∞–º", "python run_regional_parser.py --test --regions 77 78 40"),
        ("–¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞", "python run_regional_parser.py --region 77"),
        ("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤", "python run_regional_parser.py --list-regions"),
        ("–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥", "python run_regional_parser.py --test --verbose")
    ]
    
    for i, (description, command) in enumerate(examples, 1):
        print(f"{i}. {description}:")
        print(f"   {command}")
        print()


def show_parser_features():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞"""
    print("\n" + "=" * 60)
    print("‚ö° –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –†–ï–ì–ò–û–ù–ê–õ–¨–ù–û–ì–û –ü–ê–†–°–ï–†–ê")
    print("=" * 60)
    
    features = [
        "üìç –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º —Ä–µ–≥–∏–æ–Ω–∞–º –†–æ—Å—Å–∏–∏ (85+ —Ä–µ–≥–∏–æ–Ω–æ–≤)",
        "‚õΩ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ (–ê–ò-92, –ê–ò-95, –ê–ò-98, –ê–ò-100, –î–∏–∑–µ–ª—å, –ì–∞–∑)",
        "üîÑ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (JSON-LD, Next.js, regex, tables)",
        "üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü —Å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏",
        "üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏",
        "üõ°Ô∏è –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –æ—à–∏–±–∫–∞–º –∏ —Å–µ—Ç–µ–≤—ã–º –ø—Ä–æ–±–ª–µ–º–∞–º",
        "üìù –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞",
        "‚è±Ô∏è –ö–æ–Ω—Ç—Ä–æ–ª—å –∑–∞–¥–µ—Ä–∂–µ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏",
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö",
        "üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤"
    ]
    
    for feature in features:
        print(f"  {feature}")


if __name__ == "__main__":
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞
        show_parser_features()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        show_usage_examples()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
        demo_regional_parser()
        
    except KeyboardInterrupt:
        print("\nüõë –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except ImportError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    except Exception as e:
        print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–∏")