#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ü–µ–Ω –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤ –ê–ó–°
"""
import argparse
import sys
import json
from datetime import datetime
from pathlib import Path
from loguru import logger

from src.orchestrator import GasStationOrchestrator
from src.parsers.russiabase_parser import RussiaBaseRegionalParser
from config import GAS_STATION_NETWORKS, REGIONS_CONFIG


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.remove()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    logger.add(
        sys.stdout,
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{name}</cyan> | {message}",
        level="INFO"
    )


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description="–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ü–µ–Ω –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python regional_parser_final.py --all-regions           # –ü–∞—Ä—Å–∏—Ç—å –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã
  python regional_parser_final.py --popular-regions       # –ü–∞—Ä—Å–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
  python regional_parser_final.py --regions 77 78 50      # –ü–∞—Ä—Å–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã (–ú–æ—Å–∫–≤–∞, –°–ü–±, –ú–û)
  python regional_parser_final.py --max-regions 10        # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ 10 —Ä–µ–≥–∏–æ–Ω–æ–≤
  python regional_parser_final.py --list-regions          # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
        """
    )
    
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        "--all-regions",
        action="store_true",
        help="–ü–∞—Ä—Å–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã"
    )
    group.add_argument(
        "--popular-regions",
        action="store_true",
        help="–ü–∞—Ä—Å–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã (–∫—Ä—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞)"
    )
    group.add_argument(
        "--regions",
        nargs="+",
        type=int,
        help="–°–ø–∏—Å–æ–∫ ID —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"
    )
    group.add_argument(
        "--list-regions",
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤"
    )
    
    parser.add_argument(
        "--max-regions",
        type=int,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"
    )
    
    parser.add_argument(
        "--delay",
        type=float,
        default=1.5,
        help="–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.5)"
    )
    
    parser.add_argument(
        "--use-orchestrator",
        action="store_true",
        help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–∏–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä (–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º)"
    )
    
    parser.add_argument(
        "--verbose",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    return parser.parse_args()


def list_available_regions():
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    print("\nüó∫Ô∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤...")
    print("=" * 60)
    
    try:
        parser = RussiaBaseRegionalParser()
        regions = parser.get_all_regions()
        
        if regions:
            print(f"–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(regions)}")
            print("\n–°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤:")
            print("-" * 60)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            popular_ids = REGIONS_CONFIG.get('default_regions', [77, 78, 50, 40, 23, 66])
            
            print("üìç –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã:")
            for region_id, region_name in sorted(regions.items()):
                if region_id in popular_ids:
                    print(f"  {region_id:3d}: {region_name} ‚≠ê")
            
            print("\nüìç –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã:")
            for region_id, region_name in sorted(regions.items()):
                if region_id not in popular_ids:
                    print(f"  {region_id:3d}: {region_name}")
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤: {e}")


def run_regional_parsing_standalone(args):
    """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ standalone —Ä–µ–∂–∏–º–µ"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ (standalone —Ä–µ–∂–∏–º)")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = {
        'type': 'russiabase_regional',
        'base_url': 'https://russiabase.ru/prices',
        'delay': args.delay,
        'max_regions': args.max_regions
    }
    
    parser = RussiaBaseRegionalParser("regional_prices", config)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    regions_to_parse = []
    
    if args.all_regions:
        all_regions = parser.get_all_regions()
        regions_to_parse = [
            {'id': region_id, 'name': region_name}
            for region_id, region_name in all_regions.items()
        ]
        logger.info(f"–†–µ–∂–∏–º: –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã ({len(regions_to_parse)} —Ä–µ–≥–∏–æ–Ω–æ–≤)")
        
    elif args.popular_regions:
        all_regions = parser.get_all_regions()
        popular_ids = REGIONS_CONFIG.get('default_regions', [77, 78, 50, 40, 23, 66])
        regions_to_parse = [
            {'id': region_id, 'name': all_regions[region_id]}
            for region_id in popular_ids
            if region_id in all_regions
        ]
        logger.info(f"–†–µ–∂–∏–º: –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã ({len(regions_to_parse)} —Ä–µ–≥–∏–æ–Ω–æ–≤)")
        
    elif args.regions:
        all_regions = parser.get_all_regions()
        regions_to_parse = [
            {'id': region_id, 'name': all_regions.get(region_id, f'–†–µ–≥–∏–æ–Ω {region_id}')}
            for region_id in args.regions
            if region_id in all_regions
        ]
        logger.info(f"–†–µ–∂–∏–º: –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã ({len(regions_to_parse)} —Ä–µ–≥–∏–æ–Ω–æ–≤)")
    
    if not regions_to_parse:
        logger.error("–ù–µ—Ç —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
        return False
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ
    if args.max_regions and len(regions_to_parse) > args.max_regions:
        regions_to_parse = regions_to_parse[:args.max_regions]
        logger.info(f"–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ {args.max_regions} —Ä–µ–≥–∏–æ–Ω–æ–≤")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    start_time = datetime.now()
    results = parser.parse_multiple_regions(regions_to_parse)
    end_time = datetime.now()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print_regional_results(results, end_time - start_time)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª—ã
    save_regional_data(results)
    
    return len(results) > 0


def run_regional_parsing_orchestrated(args):
    """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º)")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
    regional_config = GAS_STATION_NETWORKS["regional_prices"].copy()
    regional_config['delay'] = args.delay
    regional_config['max_regions'] = args.max_regions
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
    orchestrator = GasStationOrchestrator(
        networks=["regional_prices"],
        parallel=False,
        max_workers=1
    )
    
    start_time = datetime.now()
    results = orchestrator.run()
    end_time = datetime.now()
    
    if results:
        summary = orchestrator.get_summary()
        print_orchestrator_summary(summary, end_time - start_time)
        return True
    else:
        logger.error("–ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return False


def print_regional_results(results, duration):
    """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("\n" + "=" * 80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ï–ì–ò–û–ù–ê–õ–¨–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê")
    print("=" * 80)
    
    if not results:
        print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return
    
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
    print(f"üó∫Ô∏è  –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(results)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ü–µ–Ω—ã –ø–æ —Ç–∏–ø–∞–º —Ç–æ–ø–ª–∏–≤–∞
    fuel_stats = {}
    successful_regions = []
    
    for result in results:
        if result.status == 'success' and result.fuel_prices:
            successful_regions.append(result)
            for fuel_type, price in result.fuel_prices.items():
                if fuel_type not in fuel_stats:
                    fuel_stats[fuel_type] = []
                fuel_stats[fuel_type].append(price)
    
    if fuel_stats:
        print(f"üí∞ –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –†–æ—Å—Å–∏–∏:")
        for fuel_type, prices in fuel_stats.items():
            avg_price = sum(prices) / len(prices)
            min_price = min(prices)
            max_price = max(prices)
            print(f"  {fuel_type:10}: —Å—Ä. {avg_price:.2f}, –º–∏–Ω. {min_price:.2f}, –º–∞–∫—Å. {max_price:.2f} —Ä—É–±/–ª")
    
    print(f"\nüìã –¢–æ–ø-10 —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ —Ü–µ–Ω–∞–º:")
    print("-" * 80)
    print(f"{'–†–µ–≥–∏–æ–Ω':<30} {'–ê–ò-92':<8} {'–ê–ò-95':<8} {'–ê–ò-98':<8} {'–î–¢':<8} {'–ü—Ä–æ–ø–∞–Ω':<8}")
    print("-" * 80)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
    for i, result in enumerate(successful_regions[:10], 1):
        region_name = result.region_name[:29]
        prices = result.fuel_prices
        
        ai92 = f"{prices.get('–ê–ò-92', 0):.1f}" if prices.get('–ê–ò-92') else "-"
        ai95 = f"{prices.get('–ê–ò-95', 0):.1f}" if prices.get('–ê–ò-95') else "-"
        ai98 = f"{prices.get('–ê–ò-98', 0):.1f}" if prices.get('–ê–ò-98') else "-"
        dt = f"{prices.get('–î–¢', 0):.1f}" if prices.get('–î–¢') else "-"
        propan = f"{prices.get('–ü—Ä–æ–ø–∞–Ω', 0):.1f}" if prices.get('–ü—Ä–æ–ø–∞–Ω') else "-"
        
        print(f"{region_name:<30} {ai92:<8} {ai95:<8} {ai98:<8} {dt:<8} {propan:<8}")
    
    if len(successful_regions) > 10:
        print(f"... –∏ –µ—â–µ {len(successful_regions) - 10} —Ä–µ–≥–∏–æ–Ω–æ–≤")
    
    print("-" * 80)


def print_orchestrator_summary(summary, duration):
    """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –æ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("\n" + "=" * 80)
    print("üìä –°–í–û–î–ö–ê –†–ï–ì–ò–û–ù–ê–õ–¨–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê (–û–†–ö–ï–°–¢–†–ê–¢–û–†)")
    print("=" * 80)
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
    print(f"üìù –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {summary['total_records']}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {summary['networks_parsed']}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {summary['networks_failed']}")
    
    if 'regional_prices' in summary['networks_summary']:
        net_summary = summary['networks_summary']['regional_prices']
        print(f"üó∫Ô∏è  –†–µ–≥–∏–æ–Ω–æ–≤: {net_summary['cities']}")
        print(f"‚õΩ –¢–∏–ø–æ–≤ —Ç–æ–ø–ª–∏–≤–∞: {net_summary['fuel_types']}")
        print(f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {net_summary['avg_price']:.2f} —Ä—É–±/–ª")
    
    if summary['errors']:
        print(f"\n‚ö†Ô∏è  –û—à–∏–±–∫–∏:")
        for network, error in summary['errors'].items():
            print(f"  {network}: {error}")


def save_regional_excel_report(results, filename):
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π Excel –æ—Ç—á–µ—Ç —Å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏"""
    import pandas as pd
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤
        
        # 1. –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        main_data = []
        for result in results:
            if result.status == 'success' and result.fuel_prices:
                base_row = {
                    'region_id': result.region_id,
                    'region_name': result.region_name,
                    'timestamp': result.timestamp,
                    'url': result.url,
                    'status': result.status
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—ã –ø–æ —Ç–∏–ø–∞–º —Ç–æ–ø–ª–∏–≤–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                for fuel_type, price in result.fuel_prices.items():
                    base_row[f'{fuel_type}'] = price
                
                main_data.append(base_row)
        
        # 2. –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ç–æ–ø–ª–∏–≤–∞
        fuel_stats = {}
        for result in results:
            if result.status == 'success' and result.fuel_prices:
                for fuel_type, price in result.fuel_prices.items():
                    if fuel_type not in fuel_stats:
                        fuel_stats[fuel_type] = []
                    fuel_stats[fuel_type].append(price)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–ø–ª–∏–≤—É
        fuel_summary = []
        for fuel_type, prices in fuel_stats.items():
            if prices:
                fuel_summary.append({
                    '–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞': fuel_type,
                    '–†–µ–≥–∏–æ–Ω–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏': len(prices),
                    '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞': round(sum(prices) / len(prices), 2),
                    '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞': round(min(prices), 2),
                    '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞': round(max(prices), 2),
                    '–†–∞–∑–±—Ä–æ—Å —Ü–µ–Ω': round(max(prices) - min(prices), 2)
                })
        
        # 3. –¢–æ–ø —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –∏ –¥–µ—à–µ–≤—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
        successful_results = [r for r in results if r.status == 'success' and r.fuel_prices]
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏
        with pd.ExcelWriter(filename, engine='xlsxwriter') as writer:
            
            # –õ–∏—Å—Ç 1: –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if main_data:
                main_df = pd.DataFrame(main_data)
                main_df.to_excel(writer, sheet_name='–¶–µ–Ω—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º', index=False)
            
            # –õ–∏—Å—Ç 2: –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if fuel_summary:
                summary_df = pd.DataFrame(fuel_summary)
                summary_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–ø–ª–∏–≤—É', index=False)
            
            # –õ–∏—Å—Ç 3: –°–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã (–ø–æ –ê–ò-95 –µ—Å–ª–∏ –µ—Å—Ç—å)
            if successful_results:
                ai95_regions = [(r.region_name, r.fuel_prices.get('–ê–ò-95', 0)) 
                               for r in successful_results 
                               if r.fuel_prices.get('–ê–ò-95', 0) > 0]
                
                if ai95_regions:
                    ai95_sorted = sorted(ai95_regions, key=lambda x: x[1], reverse=True)
                    expensive_df = pd.DataFrame(ai95_sorted[:10], columns=['–†–µ–≥–∏–æ–Ω', '–¶–µ–Ω–∞ –ê–ò-95'])
                    expensive_df.to_excel(writer, sheet_name='–î–æ—Ä–æ–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã –ê–ò-95', index=False)
                    
                    # –õ–∏—Å—Ç 4: –°–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
                    cheap_df = pd.DataFrame(ai95_sorted[-10:], columns=['–†–µ–≥–∏–æ–Ω', '–¶–µ–Ω–∞ –ê–ò-95'])
                    cheap_df.to_excel(writer, sheet_name='–î–µ—à–µ–≤—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –ê–ò-95', index=False)
            
            # –õ–∏—Å—Ç 5: –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            info_data = [
                ['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞', datetime.now().strftime('%Y-%m-%d %H:%M:%S')],
                ['–í—Å–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ', len(results)],
                ['–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ', len(successful_results)],
                ['–†–µ–≥–∏–æ–Ω–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏', len(results) - len(successful_results)],
                ['–¢–∏–ø–æ–≤ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞–π–¥–µ–Ω–æ', len(fuel_stats)]
            ]
            
            info_df = pd.DataFrame(info_data, columns=['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ'])
            info_df.to_excel(writer, sheet_name='–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', index=False)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
            for sheet_name in writer.sheets:
                worksheet = writer.sheets[sheet_name]
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
                for i, col in enumerate(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']):
                    if sheet_name == '–¶–µ–Ω—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º':
                        if i == 1:  # –ö–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ä–µ–≥–∏–æ–Ω–∞
                            worksheet.set_column(f'{col}:{col}', 30)
                        elif i > 4:  # –ö–æ–ª–æ–Ω–∫–∏ —Å —Ü–µ–Ω–∞–º–∏
                            worksheet.set_column(f'{col}:{col}', 12)
                        else:
                            worksheet.set_column(f'{col}:{col}', 15)
                    else:
                        worksheet.set_column(f'{col}:{col}', 20)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel –æ—Ç—á–µ—Ç–∞: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Excel, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é
        try:
            simple_data = []
            for result in results:
                if result.status == 'success':
                    row = {
                        '–†–µ–≥–∏–æ–Ω ID': result.region_id,
                        '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞': result.region_name,
                        '–°—Ç–∞—Ç—É—Å': result.status,
                        '–î–∞—Ç–∞': result.timestamp
                    }
                    if result.fuel_prices:
                        for fuel_type, price in result.fuel_prices.items():
                            row[fuel_type] = price
                    simple_data.append(row)
            
            if simple_data:
                simple_df = pd.DataFrame(simple_data)
                simple_df.to_excel(filename, index=False)
        except Exception as e2:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–∂–µ –ø—Ä–æ—Å—Ç–æ–π Excel —Ñ–∞–π–ª: {e2}")


def save_regional_data(results):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª—ã (JSON –∏ Excel)"""
    if not results:
        return
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
    json_filename = f"regional_prices_{timestamp}.json"
    
    json_data = []
    for result in results:
        json_data.append({
            'region_id': result.region_id,
            'region_name': result.region_name,
            'fuel_prices': result.fuel_prices,
            'url': result.url,
            'timestamp': result.timestamp,
            'status': result.status
        })
    
    with open(json_filename, 'w', encoding='utf-8') as f:
        json.dump(json_data, f, ensure_ascii=False, indent=2)
    
    logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON: {json_filename}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    excel_filename = f"regional_prices_{timestamp}.xlsx"
    save_regional_excel_report(results, excel_filename)
    
    logger.info(f"üìä –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel: {excel_filename}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    args = parse_arguments()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    if args.verbose:
        logger.remove()
        logger.add(
            sys.stdout,
            format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{name}</cyan> | {message}",
            level="DEBUG"
        )
    
    print("üèÅ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ü–µ–Ω –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤
    if args.list_regions:
        list_available_regions()
        return
    
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        if args.use_orchestrator:
            success = run_regional_parsing_orchestrated(args)
        else:
            success = run_regional_parsing_standalone(args)
        
        if success:
            print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print("üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        else:
            print("\n‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
            
    except KeyboardInterrupt:
        logger.warning("\n‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
    except Exception as e:
        logger.error(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()