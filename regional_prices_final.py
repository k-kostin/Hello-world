#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ russiabase.ru
–î–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–±–ª–∏—Ü
"""

import sys
import json
import csv
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from src.parsers.russiabase_parser import RussiaBaseRegionalParser, PriceData
from src.regions import RegionManager

class RegionalPriceAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ"""
    
    def __init__(self):
        self.parser = RussiaBaseRegionalParser(delay=1.5)
        self.region_manager = RegionManager()
        self.results: List[PriceData] = []
    
    def get_prices_for_region(self, region_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞"""
        region = self.region_manager.get_region_by_id(region_id)
        if not region:
            return {"error": f"–†–µ–≥–∏–æ–Ω —Å ID {region_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        result = self.parser.get_region_prices(region_id, region['name'])
        if result and result.fuel_prices:
            return {
                "region_id": region_id,
                "region_name": region['name'],
                "prices": result.fuel_prices,
                "timestamp": result.timestamp,
                "status": "success"
            }
        else:
            return {
                "region_id": region_id,
                "region_name": region['name'],
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã",
                "status": "error"
            }
    
    def get_prices_for_multiple_regions(self, region_ids: List[int]) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤"""
        results = []
        
        print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è {len(region_ids)} —Ä–µ–≥–∏–æ–Ω–æ–≤...")
        
        for i, region_id in enumerate(region_ids, 1):
            print(f"  [{i}/{len(region_ids)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞ ID {region_id}")
            
            result = self.get_prices_for_region(region_id)
            results.append(result)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            import time
            time.sleep(1.0)
        
        return results
    
    def get_popular_regions_prices(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤"""
        popular_regions = self.region_manager.get_popular_regions()
        region_ids = [region['id'] for region in popular_regions]
        return self.get_prices_for_multiple_regions(region_ids)
    
    def save_to_json(self, data: List[Dict[str, Any]], filename: str | None = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"regional_prices_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
    
    def save_to_csv(self, data: List[Dict[str, Any]], filename: str | None = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"regional_prices_{timestamp}.csv"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥—ã —Ç–æ–ø–ª–∏–≤–∞
        all_fuel_types = set()
        for item in data:
            if 'prices' in item:
                all_fuel_types.update(item['prices'].keys())
        
        all_fuel_types = sorted(list(all_fuel_types))
        
        with open(filename, 'w', newline='', encoding='utf-8') as f:
            fieldnames = ['region_id', 'region_name', 'timestamp', 'status'] + all_fuel_types
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            
            writer.writeheader()
            
            for item in data:
                row = {
                    'region_id': item.get('region_id', ''),
                    'region_name': item.get('region_name', ''),
                    'timestamp': item.get('timestamp', ''),
                    'status': item.get('status', '')
                }
                
                if 'prices' in item:
                    for fuel_type in all_fuel_types:
                        row[fuel_type] = item['prices'].get(fuel_type, '')
                
                writer.writerow(row)
        
        print(f"üìä –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV —Ñ–∞–π–ª: {filename}")
    
    def print_summary_table(self, data: List[Dict[str, Any]]):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å —Ü–µ–Ω–∞–º–∏"""
        print("\n" + "=" * 100)
        print("üìã –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –¶–ï–ù –ù–ê –¢–û–ü–õ–ò–í–û –ü–û –†–ï–ì–ò–û–ù–ê–ú")
        print("=" * 100)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        print(f"{'–†–µ–≥–∏–æ–Ω':<30} {'–ê–ò-92':<8} {'–ê–ò-95':<8} {'–ê–ò-98':<8} {'–ê–ò-100':<8} {'–î–¢':<8} {'–ü—Ä–æ–ø–∞–Ω':<8} {'–°—Ç–∞—Ç—É—Å':<10}")
        print("-" * 100)
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        successful_regions = 0
        fuel_stats = {}
        
        for item in data:
            region_name = item.get('region_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:29]
            status = item.get('status', 'unknown')
            
            if status == 'success' and 'prices' in item:
                successful_regions += 1
                prices = item['prices']
                
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–ø–ª–∏–≤—É
                for fuel_type, price in prices.items():
                    if fuel_type not in fuel_stats:
                        fuel_stats[fuel_type] = []
                    fuel_stats[fuel_type].append(price)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
                ai92 = f"{prices.get('–ê–ò-92', 0):.1f}" if prices.get('–ê–ò-92') else "-"
                ai95 = f"{prices.get('–ê–ò-95', 0):.1f}" if prices.get('–ê–ò-95') else "-"
                ai98 = f"{prices.get('–ê–ò-98', 0):.1f}" if prices.get('–ê–ò-98') else "-"
                ai100 = f"{prices.get('–ê–ò-100', 0):.1f}" if prices.get('–ê–ò-100') else "-"
                dt = f"{prices.get('–î–¢', 0):.1f}" if prices.get('–î–¢') else "-"
                propan = f"{prices.get('–ü—Ä–æ–ø–∞–Ω', 0):.1f}" if prices.get('–ü—Ä–æ–ø–∞–Ω') else "-"
                
                print(f"{region_name:<30} {ai92:<8} {ai95:<8} {ai98:<8} {ai100:<8} {dt:<8} {propan:<8} {'‚úÖ':<10}")
            else:
                print(f"{region_name:<30} {'-':<8} {'-':<8} {'-':<8} {'-':<8} {'-':<8} {'-':<8} {'‚ùå':<10}")
        
        print("-" * 100)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"–í—Å–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(data)}")
        print(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful_regions}")
        print(f"–° –æ—à–∏–±–∫–∞–º–∏: {len(data) - successful_regions}")
        
        if fuel_stats:
            print(f"\nüí∞ –°–†–ï–î–ù–ò–ï –¶–ï–ù–´ (—Ä—É–±/–ª):")
            for fuel_type, prices in fuel_stats.items():
                avg_price = sum(prices) / len(prices)
                min_price = min(prices)
                max_price = max(prices)
                print(f"  {fuel_type:<10}: —Å—Ä. {avg_price:.2f}, –º–∏–Ω. {min_price:.2f}, –º–∞–∫—Å. {max_price:.2f}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üèÅ –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω russiabase.ru")
    print("=" * 60)
    
    analyzer = RegionalPriceAnalyzer()
    
    # –ü—Ä–∏–º–µ—Ä 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ (–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π - ID 56)
    print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è (ID: 56)")
    print("-" * 50)
    
    krasnodar_prices = analyzer.get_prices_for_region(56)
    
    if krasnodar_prices.get('status') == 'success':
        print(f"‚úÖ –†–µ–≥–∏–æ–Ω: {krasnodar_prices['region_name']}")
        print(f"üìÖ –í—Ä–µ–º—è: {krasnodar_prices['timestamp']}")
        print("üí∞ –¶–µ–Ω—ã:")
        for fuel_type, price in krasnodar_prices['prices'].items():
            print(f"    {fuel_type}: {price:.2f} —Ä—É–±/–ª")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {krasnodar_prices.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    # –ü—Ä–∏–º–µ—Ä 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞–∂–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
    print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤")
    print("-" * 50)
    
    key_regions = [77, 78, 50, 23, 66, 52, 16]  # –ú–æ—Å–∫–≤–∞, –°–ü–±, –ú–û, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π, –°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è, –ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è, –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω
    
    multiple_prices = analyzer.get_prices_for_multiple_regions(key_regions)
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    analyzer.print_summary_table(multiple_prices)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("-" * 50)
    
    analyzer.save_to_json(multiple_prices)
    analyzer.save_to_csv(multiple_prices)
    
    print(f"\n‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()