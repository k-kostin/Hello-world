#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ russiabase.ru
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(Path(__file__).parent / "src"))

from regions import region_manager, get_region_id_by_name, is_valid_region_id


def demo_region_functionality():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏"""
    print("üó∫Ô∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤")
    print("=" * 50)
    
    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    summary = region_manager.get_regions_summary()
    print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {summary['total_regions']}")
    print(f"   –î–∏–∞–ø–∞–∑–æ–Ω ID: {summary['id_range']['min']}-{summary['id_range']['max']}")
    print(f"   –ü–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤: {summary['popular_regions']}")
    
    print(f"\nüìã –ü–æ —Ç–∏–ø–∞–º:")
    for region_type, count in summary['by_type'].items():
        print(f"   {region_type.capitalize()}: {count}")
    
    # –ü–æ–∏—Å–∫ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ ID
    print(f"\nüîç –ü–æ–∏—Å–∫ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ ID:")
    region_id = 40  # –ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
    region = region_manager.get_region_by_id(region_id)
    if region:
        print(f"   ID {region_id}: {region['name']}")
        print(f"   URL: {region['url']}")
    
    # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    print(f"\nüîç –ü–æ–∏—Å–∫ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:")
    region_name = "–ú–æ—Å–∫–≤–∞"
    region = region_manager.get_region_by_name(region_name)
    if region:
        print(f"   '{region_name}' –Ω–∞–π–¥–µ–Ω–∞: ID {region['id']}")
        print(f"   –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {region['name']}")
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
    print(f"\n‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã:")
    popular = region_manager.get_popular_regions()
    for region in popular[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        print(f"   {region['id']:2d}: {region['name']}")
    
    # –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É
    print(f"\nüèõÔ∏è  –†–µ—Å–ø—É–±–ª–∏–∫–∏ (–ø–µ—Ä–≤—ã–µ 5):")
    republics = region_manager.get_regions_by_type('—Ä–µ—Å–ø—É–±–ª–∏–∫–∞')
    for region in republics[:5]:
        print(f"   {region['id']:2d}: {region['name']}")
    
    # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
    print(f"\nüîé –ü–æ–∏—Å–∫ '–æ–±–ª–∞—Å—Ç—å' (–ø–µ—Ä–≤—ã–µ 5):")
    regions = region_manager.search_regions('–æ–±–ª–∞—Å—Ç—å')
    for region in regions[:5]:
        print(f"   {region['id']:2d}: {region['name']}")
    
    # –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    print(f"\nüõ†Ô∏è  –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    moscow_id = get_region_id_by_name("–ú–æ—Å–∫–≤–∞")
    print(f"   ID –ú–æ—Å–∫–≤—ã: {moscow_id}")
    
    spb_valid = is_valid_region_id(78)
    print(f"   ID 78 –≤–∞–ª–∏–¥–µ–Ω: {spb_valid}")
    
    invalid_check = is_valid_region_id(999)
    print(f"   ID 999 –≤–∞–ª–∏–¥–µ–Ω: {invalid_check}")


def demo_parsing_with_regions():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    print(f"\nüöÄ –ü—Ä–∏–º–µ—Ä—ã URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:")
    print("=" * 50)
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    popular_regions = region_manager.get_popular_regions()[:3]
    
    brand_id = 119  # –õ—É–∫–æ–π–ª
    
    for region in popular_regions:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ç–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ
        base_url = f"https://russiabase.ru/prices?brand={brand_id}&region={region['id']}"
        print(f"   {region['name']}:")
        print(f"     URL: {base_url}")
        print(f"     –ö–æ–º–∞–Ω–¥–∞: python main.py --networks lukoil --region {region['id']}")
        print()


def demo_region_validation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    print(f"\n‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤:")
    print("=" * 50)
    
    test_regions = [
        ("–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", 40),
        ("–ú–æ—Å–∫–≤–∞", 77),
        ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω", 999),
        ("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", 78)
    ]
    
    for name, region_id in test_regions:
        is_valid = is_valid_region_id(region_id)
        status = "‚úÖ" if is_valid else "‚ùå"
        print(f"   {status} {name} (ID: {region_id}) - {'–í–∞–ª–∏–¥–µ–Ω' if is_valid else '–ù–µ –Ω–∞–π–¥–µ–Ω'}")


if __name__ == "__main__":
    print("üó∫Ô∏è  –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞–º–∏ –¥–ª—è RussiaBase.ru")
    print("=" * 60)
    print()
    
    try:
        demo_region_functionality()
        demo_parsing_with_regions()
        demo_region_validation()
        
        print(f"\nüéØ –ì–æ—Ç–æ–≤–æ!")
        print(f"üìù –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–∞—Ä—Å–µ—Ä–∞—Ö –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ:")
        print(f"   from src.regions import region_manager, get_region_id_by_name")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)