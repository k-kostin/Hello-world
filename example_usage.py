#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Ü–µ–Ω –ê–ó–°
"""
import sys
from datetime import datetime
from loguru import logger

from src.orchestrator import GasStationOrchestrator
from src.utils import DataProcessor, DataValidator
from config import GAS_STATION_NETWORKS


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞"""
    logger.remove()
    logger.add(
        sys.stdout,
        format="<green>{time:HH:mm:ss}</green> | <level>{level}</level> | {message}",
        level="INFO"
    )


def example_basic_parsing():
    """–ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    logger.info("=== –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ ===")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–ª—å–∫–æ –õ—É–∫–æ–π–ª
    orchestrator = GasStationOrchestrator(
        networks=['lukoil'],
        parallel=False
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    results = orchestrator.run()
    
    if results:
        logger.info("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        summary = orchestrator.get_summary()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {summary['total_records']} –∑–∞–ø–∏—Å–µ–π")
    else:
        logger.error("–ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")


def example_parallel_parsing():
    """–ü—Ä–∏–º–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    logger.info("=== –ü—Ä–∏–º–µ—Ä 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ ===")
    
    # –ü–∞—Ä—Å–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ç–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    orchestrator = GasStationOrchestrator(
        networks=['lukoil', 'bashneft'],  # –ò—Å–∫–ª—é—á–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        parallel=True,
        max_workers=2
    )
    
    start_time = datetime.now()
    results = orchestrator.run()
    end_time = datetime.now()
    
    if results:
        logger.info(f"–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {end_time - start_time}")
        for network, df in results.items():
            network_name = GAS_STATION_NETWORKS[network]['name']
            logger.info(f"  {network_name}: {len(df)} –∑–∞–ø–∏—Å–µ–π")


def example_data_analysis():
    """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("=== –ü—Ä–∏–º–µ—Ä 3: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö ===")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
    df = DataProcessor.load_latest_data()
    
    if df is None:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥.")
        return
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df_clean = DataProcessor.clean_data(df)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = DataProcessor.get_price_statistics(df_clean)
    
    logger.info("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    logger.info(f"  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_records']}")
    logger.info(f"  –í—Å–µ–≥–æ —Å—Ç–∞–Ω—Ü–∏–π: {stats['total_stations']}")
    logger.info(f"  –í—Å–µ–≥–æ —Å–µ—Ç–µ–π: {stats['total_networks']}")
    logger.info(f"  –í—Å–µ–≥–æ –≥–æ—Ä–æ–¥–æ–≤: {stats['total_cities']}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–ø–ª–∏–≤—É
    logger.info("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–ø–ª–∏–≤—É:")
    for fuel in stats['fuel_types'][:5]:  # –¢–æ–ø-5
        logger.info(f"  {fuel['fuel_type']}: {fuel['count']} –∑–∞–ø–∏—Å–µ–π, —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ {fuel['avg_price']:.2f}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–µ—Ç–µ–π
    comparison = DataProcessor.compare_networks(df_clean, "–ê–ò-95")
    logger.info("\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–µ—Ç–µ–π –ø–æ –ê–ò-95:")
    for row in comparison.head(3).iter_rows(named=True):
        logger.info(f"  {row['network_name']}: {row['avg_price']:.2f} —Ä—É–±/–µ–¥. "
                   f"({row['stations_count']} —Å—Ç–∞–Ω—Ü–∏–π)")


def example_cheapest_stations():
    """–ü—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞ –¥–µ—à–µ–≤—ã—Ö –∑–∞–ø—Ä–∞–≤–æ–∫"""
    logger.info("=== –ü—Ä–∏–º–µ—Ä 4: –ü–æ–∏—Å–∫ –¥–µ—à–µ–≤—ã—Ö –∑–∞–ø—Ä–∞–≤–æ–∫ ===")
    
    df = DataProcessor.load_latest_data()
    if df is None:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return
    
    df_clean = DataProcessor.clean_data(df)
    
    # –ò—â–µ–º —Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –∑–∞–ø—Ä–∞–≤–∫–∏ —Å –ê–ò-95
    cheapest = DataProcessor.find_cheapest_stations(df_clean, "–ê–ò-95", limit=5)
    
    logger.info("–¢–æ–ø-5 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –∑–∞–ø—Ä–∞–≤–æ–∫ –ê–ò-95:")
    for row in cheapest.iter_rows(named=True):
        logger.info(f"  {row['network_name']} - {row['station_name']}")
        logger.info(f"    –ê–¥—Ä–µ—Å: {row['address']}")
        logger.info(f"    –¶–µ–Ω–∞: {row['price']:.2f} —Ä—É–±/–µ–¥.")
        logger.info("")


def example_data_validation():
    """–ü—Ä–∏–º–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("=== –ü—Ä–∏–º–µ—Ä 5: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ===")
    
    df = DataProcessor.load_latest_data()
    if df is None:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    quality_report = DataValidator.validate_data_quality(df)
    
    logger.info(f"–û—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö:")
    logger.info(f"  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {quality_report['total_records']}")
    logger.info(f"  –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {quality_report['quality_score']:.1f}%")
    
    if quality_report['issues']:
        logger.info("  –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        for issue in quality_report['issues']:
            logger.info(f"    {issue['type']}: {issue['count']} ({issue['percentage']:.1f}%)")
    else:
        logger.info("  –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")


def example_export_report():
    """–ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    logger.info("=== –ü—Ä–∏–º–µ—Ä 6: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ ===")
    
    df = DataProcessor.load_latest_data()
    if df is None:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
        return
    
    df_clean = DataProcessor.clean_data(df)
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_file = f"price_analysis_report_{timestamp}.xlsx"
    
    DataProcessor.export_summary_report(df_clean, report_file)
    logger.info(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")


def example_custom_network_selection():
    """–ü—Ä–∏–º–µ—Ä –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–µ—Ç–µ–π"""
    logger.info("=== –ü—Ä–∏–º–µ—Ä 7: –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–µ—Ç–µ–π ===")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ç–∏
    logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ç–∏:")
    for key, config in GAS_STATION_NETWORKS.items():
        logger.info(f"  {key}: {config['name']} ({config['type']})")
    
    # –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã–µ —Å–µ—Ç–∏ (API)
    api_networks = [key for key, config in GAS_STATION_NETWORKS.items() 
                   if config['type'] == 'api']
    
    if api_networks:
        logger.info(f"\n–ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ API —Å–µ—Ç–∏: {api_networks}")
        orchestrator = GasStationOrchestrator(networks=api_networks)
        results = orchestrator.run()
        
        if results:
            logger.info("API –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    setup_logging()
    
    logger.info("üöó –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Ü–µ–Ω –ê–ó–°")
    logger.info("="*50)
    
    examples = [
        ("–ë–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥", example_basic_parsing),
        ("–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥", example_parallel_parsing),
        ("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", example_data_analysis),
        ("–ü–æ–∏—Å–∫ –¥–µ—à–µ–≤—ã—Ö –∑–∞–ø—Ä–∞–≤–æ–∫", example_cheapest_stations),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", example_data_validation),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞", example_export_report),
        ("–í—ã–±–æ—Ä —Å–µ—Ç–µ–π", example_custom_network_selection)
    ]
    
    for i, (name, func) in enumerate(examples, 1):
        print(f"\n{i}. {name}")
        
    try:
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (1-7, –∏–ª–∏ 'all' –¥–ª—è –≤—Å–µ—Ö): ").strip()
        
        if choice.lower() == 'all':
            for name, func in examples:
                logger.info(f"\n--- –í—ã–ø–æ–ª–Ω—è–µ–º: {name} ---")
                try:
                    func()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ '{name}': {e}")
        
        elif choice.isdigit() and 1 <= int(choice) <= len(examples):
            idx = int(choice) - 1
            name, func = examples[idx]
            logger.info(f"\n--- –í—ã–ø–æ–ª–Ω—è–µ–º: {name} ---")
            func()
            
        else:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            
    except KeyboardInterrupt:
        logger.warning("\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()