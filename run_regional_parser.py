#!/usr/bin/env python3
"""
–ü—Ä–æ–¥—É–∫—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ —Å russiabase.ru
"""
import sys
import os
from pathlib import Path
from datetime import datetime
import argparse

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from typing import Optional, List
from src.parsers.russiabase_parser import RussiaBaseRegionalParser
from src.regions import region_manager
from loguru import logger


def setup_logging(verbose: bool = False):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.remove()
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    level = "DEBUG" if verbose else "INFO"
    logger.add(
        sys.stdout, 
        level=level, 
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | {message}"
    )
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
    log_file = f"logs/regional_parser_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
    os.makedirs("logs", exist_ok=True)
    logger.add(
        log_file,
        level="DEBUG",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {message}",
        rotation="10 MB"
    )
    
    logger.info(f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª: {log_file}")


def run_full_collection():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º —Ä–µ–≥–∏–æ–Ω–∞–º"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
    config = {
        "type": "russiabase_regional",
        "name": "RussiaBase Regional Fuel Prices",
        "description": "–°–±–æ—Ä —Å—Ä–µ–¥–Ω–∏—Ö —Ü–µ–Ω –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –†–æ—Å—Å–∏–∏"
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = RussiaBaseRegionalParser("regional_fuel_prices", config)
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö
        regions = region_manager.get_all_regions()
        logger.info(f"üìä –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(regions)}")
        
        # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        start_time = datetime.now()
        logger.info(f"‚è∞ –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞: {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        data = parser.fetch_data()
        
        end_time = datetime.now()
        duration = end_time - start_time
        logger.info(f"‚è±Ô∏è –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞: {duration}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...")
        df = parser.create_fuel_prices_table(data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_regions = len([d for d in data if d['status'] == 'success'])
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {successful_regions}/{len(data)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        logger.info("üìù –ü—Ä–∏–º–µ—Ä—ã —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        for i, region_data in enumerate(data[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            if region_data['status'] == 'success' and region_data['fuel_prices']:
                prices = region_data['fuel_prices']
                prices_str = ", ".join([f"{fuel}: {price} —Ä—É–±." for fuel, price in prices.items()])
                logger.info(f"   {region_data['region_name']}: {prices_str}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"regional_fuel_prices_{timestamp}.xlsx"
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ {filename}...")
        saved_file = parser.save_to_excel(data, filename)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = parser._create_statistics(data)
        logger.info("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        for key, value in stats.items():
            logger.info(f"   {key}: {value}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        logger.success(f"üéâ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üìÅ –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {saved_file}")
        logger.info(f"üïê –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {duration}")
        
        return saved_file, stats
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


def run_test_collection(region_ids: Optional[List[int]] = None):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # –†–µ–≥–∏–æ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if not region_ids:
        test_regions_ids = [77, 78, 40, 23, 16]  # –ú–æ—Å–∫–≤–∞, –°–ü–±, –ö—É—Ä—Å–∫, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω
    else:
        test_regions_ids = region_ids
    
    config = {"type": "russiabase_regional"}
    parser = RussiaBaseRegionalParser("test_regional", config)
    
    test_data = []
    
    for region_id in test_regions_ids:
        region = region_manager.get_region_by_id(region_id)
        if not region:
            logger.warning(f"‚ö†Ô∏è –†–µ–≥–∏–æ–Ω —Å ID {region_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
            
        region_name = region['name']
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏–æ–Ω: {region_name} (ID: {region_id})")
        
        try:
            region_data = parser._fetch_region_data(region_id, region_name)
            test_data.append(region_data)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É
            if region_data['status'] == 'success':
                fuel_prices = region_data.get('fuel_prices', {})
                if fuel_prices:
                    prices_str = ", ".join([f"{fuel}: {price}" for fuel, price in fuel_prices.items()])
                    logger.success(f"‚úÖ {region_name}: {prices_str}")
                else:
                    logger.warning(f"‚ö†Ô∏è {region_name}: —Ü–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                error_msg = region_data.get('error', 'Unknown error')
                logger.error(f"‚ùå {region_name}: {error_msg}")
                
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            parser.add_delay()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {region_name}: {e}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    if test_data:
        df = parser.create_fuel_prices_table(test_data)
        
        print("\n" + "="*80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í–û–ì–û –°–ë–û–†–ê")
        print("="*80)
        print(df.to_string(index=False))
        print("="*80)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        test_filename = f"test_regional_prices_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        parser.save_to_excel(test_data, test_filename)
        logger.info(f"üíæ –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {test_filename}")
        
        return test_filename
    
    return None


def run_single_region(region_id: int):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞"""
    region = region_manager.get_region_by_id(region_id)
    if not region:
        logger.error(f"‚ùå –†–µ–≥–∏–æ–Ω —Å ID {region_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
        
    region_name = region['name']
    logger.info(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞: {region_name} (ID: {region_id})")
    
    config = {"type": "russiabase_regional"}
    parser = RussiaBaseRegionalParser("single_test", config)
    
    try:
        region_data = parser._fetch_region_data(region_id, region_name)
        
        print(f"\n{'='*60}")
        print(f"üéØ –¢–ï–°–¢ –†–ï–ì–ò–û–ù–ê: {region_name.upper()}")
        print(f"{'='*60}")
        print(f"URL: {region_data['url']}")
        print(f"–°—Ç–∞—Ç—É—Å: {region_data['status']}")
        
        if region_data['status'] == 'success':
            fuel_prices = region_data.get('fuel_prices', {})
            if fuel_prices:
                print("üí∞ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ:")
                for fuel_type, price in fuel_prices.items():
                    print(f"   {fuel_type}: {price} —Ä—É–±.")
            else:
                print("‚ö†Ô∏è –¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {region_data.get('error', 'Unknown error')}")
        
        print(f"{'='*60}")
        
        return region_data
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞ {region_name}: {e}")
        return None


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description="–°–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ —Å russiabase.ru",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python run_regional_parser.py --full                    # –ü–æ–ª–Ω—ã–π —Å–±–æ—Ä –ø–æ –≤—Å–µ–º —Ä–µ–≥–∏–æ–Ω–∞–º
  python run_regional_parser.py --test                    # –¢–µ—Å—Ç–æ–≤—ã–π —Å–±–æ—Ä (5 —Ä–µ–≥–∏–æ–Ω–æ–≤)
  python run_regional_parser.py --region 77               # –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ (–ú–æ—Å–∫–≤–∞)
  python run_regional_parser.py --test --regions 77 78 40 # –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
  python run_regional_parser.py --list-regions            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤
        """
    )
    
    parser.add_argument('--full', action='store_true', 
                       help='–ü–æ–ª–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º —Ä–µ–≥–∏–æ–Ω–∞–º')
    parser.add_argument('--test', action='store_true', 
                       help='–¢–µ—Å—Ç–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–æ–≤)')
    parser.add_argument('--region', type=int, 
                       help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ ID')
    parser.add_argument('--regions', type=int, nargs='+', 
                       help='–°–ø–∏—Å–æ–∫ ID —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--list-regions', action='store_true', 
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤')
    parser.add_argument('--verbose', '-v', action='store_true', 
                       help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ (DEBUG —É—Ä–æ–≤–µ–Ω—å)')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(args.verbose)
    
    try:
        if args.list_regions:
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤
            regions = region_manager.get_all_regions()
            print(f"\nüìã –°–ü–ò–°–û–ö –†–ï–ì–ò–û–ù–û–í ({len(regions)} —à—Ç.):")
            print("-" * 60)
            for region in regions:
                print(f"ID {region['id']:2d}: {region['name']}")
            print("-" * 60)
            
        elif args.region:
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
            run_single_region(args.region)
            
        elif args.test:
            # –¢–µ—Å—Ç–æ–≤—ã–π —Å–±–æ—Ä
            region_ids: Optional[List[int]] = args.regions if args.regions else None
            run_test_collection(region_ids)
            
        elif args.full:
            # –ü–æ–ª–Ω—ã–π —Å–±–æ—Ä
            logger.warning("‚ö†Ô∏è –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º —Ä–µ–≥–∏–æ–Ω–∞–º!")
            logger.warning("‚ö†Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 15-30 –º–∏–Ω—É—Ç!")
            
            import time
            for i in range(5, 0, -1):
                print(f"–ù–∞—á–∏–Ω–∞–µ–º —á–µ—Ä–µ–∑ {i}...", end="\r")
                time.sleep(1)
            print("–ó–∞–ø—É—Å–∫!           ")
            
            run_full_collection()
            
        else:
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            parser.print_help()
            
    except KeyboardInterrupt:
        logger.info("üõë –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()