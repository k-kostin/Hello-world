#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –≤—ã–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω –ø–æ –≤—Å–µ–º —Ä–µ–≥–∏–æ–Ω–∞–º –†–æ—Å—Å–∏–∏.
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–µ–π–º–∏–Ω–≥–æ–º –∏ –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
"""

import subprocess
import sys
from datetime import datetime


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç"""
    print("üó∫Ô∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–õ–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê –†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–• –¶–ï–ù")
    print("=" * 60)
    print()
    
    print("–ß–¢–û –ò–°–ü–†–ê–í–õ–ï–ù–û:")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–µ–π–º–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–æ–ª–Ω–æ—Ç–µ –≤—ã–≥—Ä—É–∑–∫–∏")
    print("‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª–Ω—ã–º –≤—ã–≥—Ä—É–∑–∫–∞–º –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç")
    print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: –ì–∞–∑ (—Ä—É–±/–º¬≥), –ü—Ä–æ–ø–∞–Ω (—Ä—É–±/–∫–≥)")
    print("‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–ø–æ–ª–Ω—ã—Ö –≤—ã–≥—Ä—É–∑–∫–∞—Ö")
    print()
    
    print("–°–ò–°–¢–ï–ú–ê –ù–ï–ô–ú–ò–ù–ì–ê –§–ê–ô–õ–û–í:")
    print("‚Ä¢ all_regions_full_XXXreg_* - –ø–æ–ª–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ (80+ —Ä–µ–≥–∏–æ–Ω–æ–≤)")
    print("‚Ä¢ all_regions_major_XXXreg_* - –∫—Ä—É–ø–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ (50+ —Ä–µ–≥–∏–æ–Ω–æ–≤)")
    print("‚Ä¢ regional_prices_medium_XXXreg_* - —Å—Ä–µ–¥–Ω—è—è –≤—ã–≥—Ä—É–∑–∫–∞ (20+ —Ä–µ–≥–∏–æ–Ω–æ–≤)")
    print("‚Ä¢ regional_prices_small_XXXreg_* - –º–∞–ª–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ (10+ —Ä–µ–≥–∏–æ–Ω–æ–≤)")
    print("‚Ä¢ regional_prices_demo_XXXreg_* - –¥–µ–º–æ/—Ç–µ—Å—Ç–æ–≤–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ (<10 —Ä–µ–≥–∏–æ–Ω–æ–≤)")
    print()
    
    choice = input("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤? (y/N): ").strip().lower()
    
    if choice in ['y', 'yes', '–¥–∞']:
        print("\nüöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê...")
        print("‚ö†Ô∏è  –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-15 –º–∏–Ω—É—Ç –¥–ª—è ~85 —Ä–µ–≥–∏–æ–Ω–æ–≤")
        print()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            result = subprocess.run([
                sys.executable, "regional_parser.py", 
                "--all-regions",
                "--verbose"
            ], capture_output=False, text=True)
            
            if result.returncode == 0:
                print("\n‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
                print("üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏")
                print()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç
                create_maps = input("–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö? (y/N): ").strip().lower()
                if create_maps in ['y', 'yes', '–¥–∞']:
                    print("\nüó∫Ô∏è –°–û–ó–î–ê–ù–ò–ï –ö–ê–†–¢...")
                    map_result = subprocess.run([
                        sys.executable, "run_visualization.py"
                    ], capture_output=False, text=True)
                    
                    if map_result.returncode == 0:
                        print("\n‚úÖ –ö–ê–†–¢–´ –°–û–ó–î–ê–ù–´ –£–°–ü–ï–®–ù–û!")
                        print("üåê –¢–µ–ø–µ—Ä—å –∫–∞—Ä—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ–º–∏ —Ä–µ–≥–∏–æ–Ω–∞–º–∏")
                        print("üìä –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã: –ì–∞–∑ (—Ä—É–±/–º¬≥), –ü—Ä–æ–ø–∞–Ω (—Ä—É–±/–∫–≥)")
            else:
                print("\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ü–ê–†–°–ò–ù–ì–ï")
                
        except KeyboardInterrupt:
            print("\n‚è∏Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
    
    else:
        print("\nüìñ –î–õ–Ø –†–£–ß–ù–û–ì–û –ó–ê–ü–£–°–ö–ê –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï:")
        print("python regional_parser.py --all-regions")
        print("python run_visualization.py")
        print()
        print("–ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –§–ê–ô–õ–û–í:")
        
        import glob
        import json
        from pathlib import Path
        
        patterns = ["all_regions_*.json", "*_full_*.json", "regional_prices_*.json"]
        
        for pattern in patterns:
            files = glob.glob(pattern)
            for file_path in files:
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        count = sum(1 for item in data if item.get('status') == 'success')
                        size = Path(file_path).stat().st_size // 1024
                        
                    if count >= 50:
                        status = "‚úÖ –ü–û–õ–ù–ê–Ø"
                    elif count >= 20:
                        status = "‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–ê–Ø"
                    else:
                        status = "‚ùå –ù–ï–ü–û–õ–ù–ê–Ø"
                        
                    print(f"{status} - {file_path} ({count} —Ä–µ–≥–∏–æ–Ω–æ–≤, {size} KB)")
                except:
                    continue


if __name__ == "__main__":
    main()