#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω –ê–ó–°
"""
import argparse
import sys
from datetime import datetime
from loguru import logger

from src.orchestrator import GasStationOrchestrator
from config import GAS_STATION_NETWORKS


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.remove()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    logger.add(
        sys.stdout,
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{name}</cyan> | {message}",
        level="INFO"
    )


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description="–ü–∞—Ä—Å–µ—Ä —Ü–µ–Ω —Å–µ—Ç–µ–π –ê–ó–°",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py --all                    # –ü–∞—Ä—Å–∏—Ç—å –≤—Å–µ —Å–µ—Ç–∏
  python main.py --networks lukoil gazprom    # –ü–∞—Ä—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ –õ—É–∫–æ–π–ª –∏ –ì–∞–∑–ø—Ä–æ–º
  python main.py --networks bashneft --parallel   # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ë–∞—à–Ω–µ—Ñ—Ç–∏
  python main.py --list                   # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ç–∏
        """
    )
    
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        "--all",
        action="store_true",
        help="–ü–∞—Ä—Å–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ç–∏ –ê–ó–°"
    )
    group.add_argument(
        "--networks",
        nargs="+",
        choices=list(GAS_STATION_NETWORKS.keys()),
        help="–°–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"
    )
    group.add_argument(
        "--list",
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ç–µ–π"
    )
    
    parser.add_argument(
        "--parallel",
        action="store_true",
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ)"
    )
    
    parser.add_argument(
        "--workers",
        type=int,
        default=3,
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)"
    )
    
    parser.add_argument(
        "--verbose",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    return parser.parse_args()


def list_networks():
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ç–µ–π"""
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ç–∏ –ê–ó–°:")
    print("=" * 70)
    
    for key, config in GAS_STATION_NETWORKS.items():
        network_type = config['type']
        type_info = ""
        
        if network_type == 'russiabase':
            type_info = f"–°—Ç—Ä–∞–Ω–∏—Ü: {config.get('max_pages', 1)}"
        elif network_type == 'russiabase_regional':
            type_info = f"–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä (–≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã –†–æ—Å—Å–∏–∏)"
        elif network_type == 'api':
            type_info = f"API: {config.get('api_base', 'N/A')}"
        elif network_type == 'selenium':
            type_info = f"Selenium WebDriver"
        elif network_type == 'tatneft_api':
            type_info = f"–¢–∞—Ç–Ω–µ—Ñ—Ç—å API"
        
        print(f"  {key:18} - {config['name']:25} ({network_type})")
        if type_info:
            print(f"{'':22}   {type_info}")
    
    print(f"\n–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Å–µ—Ç–µ–π: {len(GAS_STATION_NETWORKS)}")
    print("\nüí° –î–ª—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python main.py --networks regional_prices")
    print("üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç: python regional_parser_final.py --help")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    args = parse_arguments()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    if args.verbose:
        logger.remove()
        logger.add(
            sys.stdout,
            format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{name}</cyan> | {message}",
            level="DEBUG"
        )
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π
    if args.list:
        list_networks()
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ç–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    if args.all:
        networks = list(GAS_STATION_NETWORKS.keys())
        logger.info("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ç–µ–π")
    else:
        networks = args.networks
        logger.info(f"–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π: {', '.join(networks)}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã
    mode = "–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º" if args.parallel else "–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º"
    logger.info(f"–†–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {mode}")
    if args.parallel:
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤: {args.workers}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        orchestrator = GasStationOrchestrator(
            networks=networks,
            parallel=args.parallel,
            max_workers=args.workers
        )
        
        start_time = datetime.now()
        results = orchestrator.run()
        end_time = datetime.now()
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if results:
            summary = orchestrator.get_summary()
            
            print("\n" + "=" * 60)
            print("–°–í–û–î–ö–ê –ü–û –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú –ü–ê–†–°–ò–ù–ì–ê")
            print("=" * 60)
            print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time}")
            print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {summary['total_records']}")
            print(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ—Ç–µ–π: {summary['networks_parsed']}")
            print(f"–°–µ—Ç–µ–π —Å –æ—à–∏–±–∫–∞–º–∏: {summary['networks_failed']}")
            
            print("\n–ü–æ —Å–µ—Ç—è–º:")
            for network, stats in summary['networks_summary'].items():
                network_name = GAS_STATION_NETWORKS[network]['name']
                print(f"  {network_name:20}: {stats['records']:4} –∑–∞–ø–∏—Å–µ–π, "
                      f"{stats['stations']:3} —Å—Ç–∞–Ω—Ü–∏–π, "
                      f"{stats['cities']:2} –≥–æ—Ä–æ–¥–æ–≤, "
                      f"—Å—Ä. —Ü–µ–Ω–∞: {stats['avg_price']:.2f}")
            
            if summary['errors']:
                print(f"\n–û—à–∏–±–∫–∏:")
                for network, error in summary['errors'].items():
                    print(f"  {network}: {error}")
            
            print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: data/")
            
        else:
            logger.error("–ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            sys.exit(1)
            
    except KeyboardInterrupt:
        logger.warning("–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()