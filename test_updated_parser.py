#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ
—Å —Å–∞–π—Ç–∞ russiabase.ru —Å –Ω–æ–≤—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
"""

import sys
import logging
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from src.parsers.russiabase_parser import RussiaBaseRegionalParser
from src.regions import RegionManager

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.FileHandler(f'test_parser_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')
        ]
    )

def test_region_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ russiabase.ru")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = RussiaBaseRegionalParser(delay=2.0)
    region_manager = RegionManager()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
    test_regions = [
        {"id": 56, "name": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π"},  # –†–µ–≥–∏–æ–Ω –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        {"id": 77, "name": "–ú–æ—Å–∫–≤–∞"},
        {"id": 78, "name": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"},
        {"id": 23, "name": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π"},
        {"id": 16, "name": "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω"}
    ]
    
    print(f"üìç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è {len(test_regions)} —Ä–µ–≥–∏–æ–Ω–æ–≤:")
    for region in test_regions:
        print(f"  - {region['name']} (ID: {region['id']})")
    print()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
    results = []
    for i, region in enumerate(test_regions, 1):
        print(f"üîÑ [{i}/{len(test_regions)}] –ü–∞—Ä—Å–∏–Ω–≥: {region['name']} (ID: {region['id']})")
        
        try:
            result = parser.get_region_prices(region['id'], region['name'])
            
            if result and result.fuel_prices:
                results.append(result)
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã —Ü–µ–Ω—ã:")
                for fuel_type, price in result.fuel_prices.items():
                    print(f"    {fuel_type}: {price:.2f} —Ä—É–±/–ª")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region['name']}")
            
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–µ–≥–∏–æ–Ω–∞ {region['name']}: {e}")
        
        print()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)
    
    if results:
        print(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(results)}")
        print(f"–†–µ–≥–∏–æ–Ω–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {len(test_regions) - len(results)}")
        
        # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞
        fuel_data = {}
        for result in results:
            for fuel_type, price in result.fuel_prices.items():
                if fuel_type not in fuel_data:
                    fuel_data[fuel_type] = []
                fuel_data[fuel_type].append(price)
        
        print("\nüìà –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –≤–∏–¥–∞–º —Ç–æ–ø–ª–∏–≤–∞:")
        for fuel_type, prices in fuel_data.items():
            avg_price = sum(prices) / len(prices)
            min_price = min(prices)
            max_price = max(prices)
            print(f"  {fuel_type:10}: —Å—Ä. {avg_price:.2f}, –º–∏–Ω. {min_price:.2f}, –º–∞–∫—Å. {max_price:.2f} —Ä—É–±/–ª")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        print("\nüó∫Ô∏è  –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:")
        print("-" * 80)
        print(f"{'–†–µ–≥–∏–æ–Ω':<25} {'–ê–ò-92':<8} {'–ê–ò-95':<8} {'–ê–ò-98':<8} {'–î–¢':<8} {'–ü—Ä–æ–ø–∞–Ω':<8}")
        print("-" * 80)
        
        for result in results:
            fuel_prices = result.fuel_prices
            region_name = result.region_name[:24]  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            
            ai92 = f"{fuel_prices.get('–ê–ò-92', 0):.1f}" if fuel_prices.get('–ê–ò-92') else "-"
            ai95 = f"{fuel_prices.get('–ê–ò-95', 0):.1f}" if fuel_prices.get('–ê–ò-95') else "-" 
            ai98 = f"{fuel_prices.get('–ê–ò-98', 0):.1f}" if fuel_prices.get('–ê–ò-98') else "-"
            dt = f"{fuel_prices.get('–î–¢', 0):.1f}" if fuel_prices.get('–î–¢') else "-"
            propan = f"{fuel_prices.get('–ü—Ä–æ–ø–∞–Ω', 0):.1f}" if fuel_prices.get('–ü—Ä–æ–ø–∞–Ω') else "-"
            
            print(f"{region_name:<25} {ai92:<8} {ai95:<8} {ai98:<8} {dt:<8} {propan:<8}")
        
        print("-" * 80)
        
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

def test_fuel_normalization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–ø–ª–∏–≤–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–ø–ª–∏–≤–∞")
    print("-" * 50)
    
    parser = RussiaBaseRegionalParser()
    
    test_names = [
        "–ê–ò-92", "–∞–∏-92", "AI-92", "92", "–ê–∏-92+",
        "–ê–ò-95", "–∞–∏-95", "AI-95", "95", "–ê–∏-95+", 
        "–ê–ò-98", "–∞–∏-98", "98",
        "–ê–ò-100", "100",
        "–î–∏–∑–µ–ª—å", "–î–¢", "–¥—Ç", "Diesel",
        "–ì–∞–∑", "–ü—Ä–æ–ø–∞–Ω", "LPG", "–°–£–ì"
    ]
    
    for name in test_names:
        normalized = parser._normalize_fuel_name(name)
        print(f"  '{name}' -> '{normalized}'")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    setup_logging()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞–∑–≤–∞–Ω–∏–π
        test_fuel_normalization()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–≥–∏–æ–Ω–æ–≤
        test_region_parsing()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()